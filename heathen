#!/bin/python3
import os
import random
import argparse
import pysword_repo
import configparser
from datetime import datetime

try:
    from pysword.modules import SwordModules
    from pysword.bible import SwordBible
    import pysword 
except:
    print("You are missing pysword, to install: pip install [--user] pysword\nOr check your repository")
    exit(1)

biblepath = os.path.join(os.path.dirname(os.path.realpath(__file__)),".bibles")
heathennotes = os.path.join(biblepath,".heathennotes")
tempfiles =  os.path.join(biblepath,".tempfiles")
version = "DRC"
thebiblepath = ""
bible = None


def open_bible():
    global bible
    checkeroo = thebiblepath.rsplit('.',1)
    if len(checkeroo) > 1:
        if checkeroo[1] == "zip":
            modules = SwordModules(thebiblepath)
            modules.parse_modules()
            bible = modules.get_bible_from_module(version)
        else:
            bible = SwordBible(thebiblepath)
    else:
        bible = SwordBible(thebiblepath)
        
def versePrint(version, book, chapter, verses):
    string = ""
    verses[0] = int(verses[0])
    resultsarray = bible.get(books=[book], chapters=[int(chapter)], verses=verses).splitlines()
    
    if (int(verses[0]) == 1):
        string+="\n{}, {}, {}\n\n".format(version, book.capitalize(), chapter)+resultsarray.pop(0)
        verses.pop(0)
    else:
        string+="\n{}, {}, {}\n\n{}: {}".format(version, book.capitalize(), chapter, verses.pop(0),resultsarray.pop(0))
    lines = zip(verses,resultsarray)
    for number,verse in lines: string+="\n{}: ".format(number)+verse
    return string 

def compile_verse_text(bookline,verseline):
    grab_module()
    outputer = []    
    books = bookline.split(',')
    topparts = verseline.split(',')
    string=""
    if len(books) == 1 and len(topparts) != 1:
        books = books*(len(topparts))
    if len(topparts) == 1 and len(books) != 1:
        topparts = topparts*len(topparts)
    thedict = zip(books,topparts)
    for book,part in thedict:
        parts = part.split('-')
        
        chapter = parts[0]
        
        if ':' in str(parts[0]):
            parts2 = parts[0].split(':')
            versespieces = part.split(':')[1]
            chapter = parts2[0]
            parts = versespieces.split('-')
            if len(parts) > 1:
                verse2 = parts[1]
                verse1 = parts[0]
                if verse2 == "+":
                    verse2 = bible.get_structure().find_book(book)[1].chapter_lengths[int(chapter)-1]
                
                outputer.append([chapter, list(range(int(verse1),int(verse2)+1))])
                
            else:
                outputer.append([chapter, [versespieces]])
                
            
        else:
            if parts[0] == '+':
                for x in range(1,bible.get_structure().find_book(book)[1].num_chapters+1):
                    verse2 = list(range(1,int(bible.get_structure().find_book(book)[1].chapter_lengths[int(x)-1])+1))
                    outputer.append([x, verse2])
            else:
                verse2 = list(range(1,int(bible.get_structure().find_book(book)[1].chapter_lengths[int(chapter)-1])+1))
                outputer.append([chapter, verse2])
        
        for part in outputer:
            chapter=part[0]
            verses=part[1]
            result = versePrint(version , book, chapter, verses)
            string+=result+"\n"
        outputer = []
    return string

def grab_module():
    global thebiblepath
    global version
    v1 = args.version[0].lower()
    modules = pyrepoz.find_module(v1, installed=True)
    if len(modules) == 1:
        installfiles = modules[0][1]['installed files'].split("## ")
        installfiles.remove("")
        if len(installfiles) == 1:
            thebiblepath = installfiles[0]
        else:
            thebiblepath = os.path.dirname(installfiles[0])
        version = modules[0][1]['name'].strip('[]').upper()
    else:
        printf("You need a bible for what you are trying to do, maybe install one with -a")
        exit(1)

def add_to_notes(bookvernotes):
    now = datetime.now()
    date_time = now.strftime("%d-%m-%Y,%H-%M-%S")
    config = configparser.ConfigParser()
    if os.path.exists(heathennotes):
        config.read(heathennotes)
    for bookver,chapterverse,note in bookvernotes:
        if bookver not in config.keys():
            config[bookver] = {}
            note = date_time+": "+note
        else:
            if chapterverse in config[bookver]:
                lastnote = config[bookver][chapterverse]
                note=date_time+": "+note+"\n"+lastnote
                del config[bookver][chapterverse]
            else:
                note = date_time+": "+note
        config[bookver][chapterverse] = note
    with open(heathennotes, 'w') as conf:
        config.write(conf)

def compare_verse_lines(compare,compare2):
    def compare_line(line, line2, verse, chapter ,version):
        bookver = None
        cleanline1 = line.strip().rstrip()
        cleanline2 = line2.strip().rstrip()
        status = False
        if cleanline1 == cleanline2:
            if version in cleanline1:
                info = cleanline1.split(', ')
                bookver = info[0].strip().rstrip().lower()+"-"+info[1].strip().rstrip().lower()
                chapter = info[2].strip().rstrip()
            elif cleanline1.split(':',1)[0].isdigit():
                verse=int(cleanline1.split(':',1)[0])
            else:
                verse=1
            status = True
        chapterverse = str(chapter)+"_"+str(verse)
        return [status, chapterverse, bookver,[chapter,verse]]
    
    bookvers=[]
    chapterverses=[]
    notes=[]
    compare.remove('')
    compare2.remove('\n')
    if '' in compare2:
        compare2.remove('')
    subtractor=0
    chapter = 0
    verse = 1
    for x in range(0,len(compare)):
        comparison = compare_line(compare[x],compare2[x],verse, chapter,version)
        chapterverse=comparison[1]
        if comparison[2] != None:
            bookver = comparison[2]
            chapter = comparison[3][0]
        elif not comparison[0]:
            bookvers.append(bookver)
            chapterverses.append(comparison[1])
            notes.append(compare2[x].strip().rstrip())
            compare2.pop(x)
            comparison = compare_line(compare[x],compare2[x],verse, chapter,version)
            verse = comparison[3][1]
            chapter = comparison[3][0]
            while not comparison[0]:
                bookvers.append(bookver)
                chapterverses.append(comparison[1])
                notes.append(compare2[x].strip().rstrip())
                compare2.pop(x)
                comparison = compare_line(compare[x],compare2[x],verse, chapter,version)
                verse = comparison[3][1]
                chapter = comparison[3][0]
        else:
            verse = comparison[3][1]
            chapter = comparison[3][0]
    while len(compare) != len(compare2):
        bookvers.append(bookver)
        chapterverses.append(comparison[1])
        notes.append(compare2[x+1].strip().rstrip())
        compare2.pop(x+1)
    return zip(bookvers,chapterverses,notes)

def grab_and_open():
    try:
        grab_module()
        open_bible()
    except:
        response = input("The bible version you are looking for, you do not have.\nWould you like to download?(y/n): ")
        if 'y' in response:
            version = install_the_module()
            grab_module()
            open_bible()
        else:
            exit(1)

def heathen_first_run(handlingfunction):
    print("Welcome to heathen!")
    answer = input("Do you have an existing sword path?(y/n)").lower()
    if 'y' in answer:
        answer = handlingfunction("Enter your sword directory path: ")
        biblepath = answer.strip().rstrip()
        heathenconf['MAIN']['sword path'] = biblepath
        pyrepoz = pysword_repo.PyswordRepo(swrdpath=biblepath,repoconf=".heathenrepo")
        
        pyrepoz.bootstrap_ibm()
        
        installedmodules = pyrepoz.list_installed_modules()
        installedmodslen = range(0,len(installedmodules))
        for x in installedmodslen:
            print(str(x+1)+": "+installedmodules[x][0]+"\n"+installedmodules[x][1]['about'])
        answer = handlingfunction("Select module as default version: ")
        if answer.isdigit and (int(answer)-1) in installedmodslen:
            version = installedmodules[int(answer-1)][0]
            heathenconf['MAIN']['version'] = version
        
    elif 'n' in answer:
        biblepath = os.path.join(os.path.dirname(os.path.realpath(__file__)),".bibles")
        heathenconf['MAIN']['sword path'] = biblepath
        
        pyrepoz = pysword_repo.PyswordRepo(swrdpath=biblepath,repoconf=".heathenrepo")
        pyrepoz.initiate_repo()
        pyrepoz.update_repo_list()
        pyrepoz.download_repos()
        pyrepoz.install_module('drc.conf-drc')
        version = 'drc.conf-drc'
        heathenconf['MAIN']['version'] = version
        return pyrepoz

heathenconfig = os.path.join(os.path.realpath(__file__),'.heathen')

if __name__ == '__main__':
    heathenconf = configparser.ConfigParser()
    if os.path.exists(heathenconfig):
        with open(heathenconfig, 'r') as conf:
            heathenconf.read(conf)
        biblepath = heathenconf['MAIN']['sword path']
        pyrepoz = pysword_repo.PyswordRepo(swrdpath=biblepath,repoconf=".heathenrepo")
    else:
        pyrepoz = heathen_first_run(input)
        
    parser = argparse.ArgumentParser(description='Grab bible verses!')
    
    verse_help = "Display verse: book chapter:verse(s)\n {} --verse john 3:16-+\n+ signifies final verse.".format(parser.prog)
    reader_help = "Display chapter or verses in editor:\nbook chapter:verse(s)(-chapter):verse(s)\n {} --verse john 3-3".format(parser.prog)
    
    parser.add_argument("--initiate", "-i", help="Install sword repos", action='store_true')
    parser.add_argument("--prefer_zip","-z", help="Prefer zip packages.", action='store_true')
    parser.add_argument("--add_module", "-a", help="Install sword module from repo", nargs=1, default=None, metavar=("modulename"))
    parser.add_argument("--verse", "-v", help=verse_help, nargs=2, default=None, metavar=("book","chapter:verse(s)"))
    parser.add_argument("--reader", "-r", help=reader_help, nargs=2, default=None, metavar=("book","chapter(:verses)"))
    parser.add_argument("--version", "-b", help='Bible version', nargs=1, default=['drc'], metavar=("version"))
    parser.add_argument("--verse_numbers", "-n", help='print verse numbers', action='store_true')
    parser.add_argument("--take_notes", "-t", help='Record not for verses', action='store_true')
    args = parser.parse_args()
    
    if args.add_module != None:
        isitinstalled = pyrepoz.find_module(args.add_module[0], installed=True)
        if len(isitinstalled) == 0:
            modules = pyrepoz.find_module(args.add_module[0])
            if len(modules) >= 1:
                pyrepoz.install_module(modules[0][0], preferzip=args.prefer_zip)
        else:
            print("{} is installed.".format(args.add_module[0]))
    
    
    if args.initiate:
        go_on = True
        if os.path.exists(pyrepoz.pyrepo_list):
            answer = input("You have already initialized your repos, ar you sure you want to do that again?(y/N): ")
            if answer != 'y':
                go_on = False
        if go_on:
            pyrepoz.initiate_repo()
            pyrepoz.update_repo_list()
            pyrepoz.download_repos()
    
    
    if args.reader != None:
        grab_and_open()
        
        try:
            results = compile_verse_text(args.reader[0], args.reader[1])
        except:
            print("The verse you are looking for likely doesnt exist.")
        
        if not os.path.exists(tempfiles):
            os.makedirs(tempfiles)
        now = datetime.now()
        date_time = now.strftime("%d-%m-%Y,%H-%M-%S")
        thetempfile = os.path.join(tempfiles,date_time+".readings")
        
        with open(thetempfile, 'w') as temps:
            temps.write(results)
        temps.close()
        compare = results.splitlines()
        input("To take notes, just enter them on the line underneath the verse..press enter to continue")
        os.system('%s %s' % (os.environ['EDITOR'], thetempfile))
        with open(thetempfile, 'r') as temps:
            compare2 = temps.readlines()
        os.remove(thetempfile)
        add_to_notes(compare_verse_lines(compare,compare2))
        print("Good bye!")
        
        
        
    if args.verse != None:
        grab_module()
        open_bible()
        result = compile_verse_text(args.verse[0], args.verse[1])
        print(result)
            
    
    if args.take_notes:
        if args.verse != None:
            config = configparser.ConfigParser()
            if os.path.exists(heathennotes):
                config.read(heathennotes)
            chapterverse = args.verse[1].replace(':','_')
            bookver = args.verse[0]+"-"+version
            if chapterverse in config[bookver]:
                lastnote = config[bookver][chapterverse]
                note = input("last notes: {}\nnote: ".format(lastnote))
            else:
                note = input("note: ")
            add_to_notes(zip([bookver],[chapterverse],[note]))
            
            

