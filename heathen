#!/bin/python3
import os
import random
import argparse
import pysword_repo
import configparser
from datetime import datetime

try:
	from pysword.modules import SwordModules
	from pysword.bible import SwordBible
except:
	print("You are missing pysword, to install: pip install [--user] pysword\nOr check your repository")
	exit(1)

biblepath = os.path.join(os.path.dirname(os.path.realpath(__file__)),".bibles")
heathennotes = os.path.join(biblepath,".heathennotes")
version = "DRC"
thebiblepath = ""

def versePrint(version, book, chapter, verses):
	checkeroo = thebiblepath.rsplit('.',1)
	if len(checkeroo) > 1:
		if checkeroo[1] == "zip":
			modules = SwordModules(thebiblepath)
			modules.parse_modules()
			bible = modules.get_bible_from_module(version)
		else:
			bible = SwordBible(thebiblepath)
	else:
		bible = SwordBible(thebiblepath)
	
	verses[0] = int(verses[0])

	if len(verses) > 1:
		if verses[1] == "*":
			verses[1] = bible.get_structure().find_book(book)[1].chapter_lengths[chapter-1]
		verses[1] = int(verses[1])
		verses = list(range(verses[0],verses[1]+1))

	return bible.get(books=[book], chapters=[chapter], verses=verses)

def compile_verse_text(booksline,verseline):
	grab_module()
	outputter = []	
	book = bookline.split(',')
	topparts = verseline.split(',')
	
	if len(books) == 1 and len(topparts) != 1:
		books = books*len(topparts)
	if len(topparts) == 1 and len(books) != 1:
		if topparts[0] == '*':
			pass
		else:
			topparts = topparts*len(topparts)
	
	for book,part in books,topparts:
		parts = part.split('-',1)
		while len(parts) != 0:
			if ':' in parts[0]:
				parts2 = parts[0].split(':')
				versespieces = parts2[1].split('-',1)
				chapter = parts2[0]
				
				verse1 = versespieces[0]
				parts = versespieces[1].split('-',1)
				verse2 = parts[0]
				
				outputer.append([chapter, [verse1,verse2]])
				
				del parts[0]
			else:
				outputer.append([parts[0], [1,'*']])
				del parts[0]
		string = ""
		for part in outputer:
			result = versePrint(version , book, chapter, verses)
			if (int(verses[0]) == 1) and ( verses[1] == '*' ):
				string = "{}, {}, {}\n\n".format(version, book, chapter)
	
			else:
				string = "{}, {}, {}:{}-{}\n\n".format(version, book, chapter, verses[0], verses[2])
			if args.verse_numbers:
				verse = int(verses[0])
				for line in result.splitlines():
					string+="{}: {}\n".format(verse,line))
					verse+=1
			else:
				string+=results+"\n"

def grab_module():
	global thebiblepath
	global version
	v1 = args.version[0].lower()
	modules = pyrepoz.find_module(v1, installed=True)
	print(modules)
	if len(modules) == 1:
		installfiles = modules[0][1]['installed files'].split("## ")
		installfiles.remove("")
		if len(installfiles) == 1:
			thebiblepath = installfiles[0]
		else:
			thebiblepath = os.path.dirname(installfiles[0])
		version = modules[0][1]['name'].strip('[]').upper()
	else:
		printf("You need a bible for what you are trying to do, maybe install one with -a")
		exit(1)

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Grab bible verses!')
	verse_help = "Display verse: book chapter:verse(s)\n {} --verse john 3:16-*\n* signifies final verse.".format(parser.prog)
	reader_help = "Display chapter or verses in editor:\nbook chapter:verse(s)(-chapter):verse(s)\n {} --verse john 3-3".format(parser.prog)
	
	pyrepoz = pysword_repo.PyswordRepo(swrdpath=biblepath,repoconf=".heathenrepo")
	
	parser.add_argument("--initiate", "-i", help="Install sword repos", action='store_true')
	parser.add_argument("--prefer_zip","-z", help="Prefer zip packages.", action='store_true')
	parser.add_argument("--add_module", "-a", help="Install sword module from repo", nargs=1, default=None, metavar=("modulename"))
	parser.add_argument("--verse", "-v", help=verse_help, nargs=2, default=None, metavar=("book","chapter:verse(s)"))
	parser.add_argument("--reader", "-r", help=reader_help, nargs=2, default=None, metavar=("book","chapter(:verses)"))
	parser.add_argument("--version", "-b", help='Bible version', nargs=1, default=['drc'], metavar=("version"))
	parser.add_argument("--verse_numbers", "-n", help='print verse numbers', action='store_true')
	parser.add_argument("--take_notes", "-t", help='Record not for verses', action='store_true')
	args = parser.parse_args()
	
	if args.add_module != None:
		isitinstalled = pyrepoz.find_module(args.add_module[0], installed=True)
		if len(isitinstalled) == 0:
			modules = pyrepoz.find_module(args.add_module[0])
			if len(modules) >= 1:
				pyrepoz.install_module(modules[0][0], preferzip=args.prefer_zip)
		else:
			print("{} is installed.".format(args.add_module[0]))
	
	
	if args.initiate:
		go_on = True
		if os.path.exists(pyrepoz.pyrepo_list):
			answer = input("You have already initialized your repos, ar you sure you want to do that again?(y/N): ")
			if answer != 'y':
				go_on = False
		if go_on:
			pyrepoz.initiate_repo()
			pyrepoz.update_repo_list()
			pyrepoz.download_repos()
	
	
	if args.reader != None:
		results = compile_verse_text(args.reader[0], args.reader[1])
		
		
	if args.verse != None: 
		book = args.verse[0]
		pieces = args.verse[1].split(':')
		chapter = int(pieces[0])
		verses = pieces[1].split('-')
		grab_module()
		try:
			result = versePrint(version , book, chapter, verses)
			if args.verse_numbers:
				verse = int(verses[0])
				for line in result.splitlines():
					print ("{}: {}".format(verse,line))
					verse+=1
			else:
				print(result)
		except:
			print("verse not found... or maybe you are ordering it wrong")
			exit(1)
	
	if args.take_notes:
		now = datetime.now()
		date_time = now.strftime("%d-%m-%Y,%H-%M-%S")
		config = configparser.ConfigParser()
		if os.path.exists(heathennotes):
			config.read(heathennotes)
		if args.verse != None:
			chapterverse = args.verse[1].replace(':','_')
			bookver = book+"-"+version
			if bookver not in config.keys():
				config[bookver] = {}
				note = input("note: ")
				note = date_time+": "+note
			else:
				if chapterverse in config[bookver]:
					lastnote = config[bookver][chapterverse]
					note = input("last notes: {}\nnote: ".format(lastnote))
					note=date_time+": "+note+"\n"+lastnote
					del config[bookver][chapterverse]
				else:
					note = input("note: ")
					note = date_time+": "+note
			
			config[bookver][chapterverse] = note
			with open(heathennotes, 'w') as conf:
				config.write(conf)

