#!/bin/bash

#basic functions
#variables
choice_one=0
choice_two=0
kmod=""
videoe=""
scriptname="HR-archinstallautofixed"

grap_choice()
{
	echo "Please enter it twice to ensure validity:"
	printf "once: "
	read -r choice_one
	printf "twice: " 
	read -r choice_two
}

verify_choice()
{
	while [ ! "$choice_one" == "$choice_two" ]; do
		grab_choice
	done
}

pick_keymap()
{
	ls /usr/share/kbd/keymaps/**/*.map.gz | less
	grab_choice
	verify_choice
	loadkeys "$choice_one"
}

easy_diskprep()
{
	
	fdisk -l | less
	printf "Enter disk choice(fullname e.g. '/dev/disk': "
	verify_choice
	
	if [[ $choice_one == **"nvme"** ]]
	then
		s1="p1"
		s2="p2"
	else
		s1=1
		s2=2
	fi
	
	sgdisk -z "$choice_one"
	sgdisk -g -n 1:0:+150M "$choice_one" -t 1:ef00
	last=$(sgdisk -E "$choice_one")
	next=$(sgdisk -F "$choice_one")
	sgdisk -n 2:"$next":"$last" "$choice_one" -t 2:8300
	echo "Partitioning done, now to setup encryption.."
	cryptsetup luksFormat --type luks1 "$choice_one"$s2
	printf "Enter node name for partition: "
	read -r rootnodename
	echo "opening..."
	cryptsetup open "$choice_one"$s2 "$rootnodename"
	echo "Formating and mounting.."
	mkfs.ext4 /dev/mapper/"$rootnodename"
	mkfs.fat -F 16 "$choice_one"$s1
	mount /dev/mapper/"$rootnodename" /mnt
	mkdir -p /mnt/boot/efi
	mount "$choice_one"$s1 /mnt/boot/efi
	printf "Enter keyfile name(this is to avoid entering password twice): "
	read -r keyname
	dd bs=512 count=4 if=/dev/random of=/mnt/"$keyname" iflag=fullblock
	cryptsetup -v luksAddKey /dev/"$choice_one"$s2 /mnt/"$keyname"
	rootuuid=$(blkid -o value "$choice_one"$s2)
	echo "$rootuuid" > ss
	echo "$keyname" > fbi
	echo "$rootnodename" > zog
}

connect-interwebz()
{
	printf "Time to connect to internet.\nWifi?(y/n): "
	read -r ans
	if [ "$ans" == 'y' ]
	then
		wifi-menu
		dhcpcd
	else
		dhcpcd
	fi
	echo "Hopfully that worked..."
}

timez_setz()
{
	ls /usr/share/zoneinfo/**/**
	echo "Enter choice as Zone/SubZone"
	grab_choice
	ln -sf /usr/share/zoneinfo/"$choice_one" /etc/localtime
	hwclock --systohc
}

setz_localez()
{
	printf "Default english-us locales(y/N)?"
	read -r choice
	if [ "$choice" == 'y' ]
	then
		echo "Editing locale.gen..."
		sed -i '/en_US.UTF-8 UTF-8/s/^#//g' /etc/locale.gen
		echo "Running locale-gen..."
		locale-gen
		echo "Creating locale.conf"
		printf "LANG=en_US.UTF-8\nLC_COLLATE=C\nLC_TIME=en_US.UTF-8\n" > /etc/locale.conf
	else
		printf "edit locale.gen:"
		read
		nano /etc/locale.gen
		echo "Running locale-gen..."
		locale-gen
		printf "edit locale.conf:"
		read
		nano /etc/locale.conf
	fi
}

auto_grub_edit()
{
	rootuuid=$(cat ss)
	rootnodename=$(cat zog)
	rm ss zog
    grubline="GRUB_CMDLINE_LINUX_DEFAULT=\"quiet cryptdevice=$rootuuid:$rootnodename root=/dev/mapper/$rootnodename resume=/dev/mapper/$rootnodename root efi=runtime\""
    sed -i 's,^GRUB_CMDLINE_LINUX_DEFAULT=.*,'"$grubline"',' /etc/default/grub
	echo "!done!"
}

auto_mkinit_edit()
{
	bootkeyfile=$(cat fbi)
	rm fbi
	mods="MODULES=(efivarfs $videoe)"
	filez="FILES=(/$bootkeyfile)"
	hooky="HOOKS=(base udev autodetect modconf block keyboard keymap encrypt filesystems)"
	sed -i 's,^MODULES=.*,'"$mods"',' /etc/mkinitcpio.conf
	sed -i 's,^FILES=.*,'"$filez"',' /etc/mkinitcpio.conf
	sed -i 's,^HOOKS=.*,'"$hooky"',' /etc/mkinitcpio.conf
	echo "All done!"
}

mkinit_edit()
{
	printf "Edit mkinitcpio.conf defaults?(Y/n): "
	read -r edit_mkinit
	if [ ! "$edit_mkinit" == 'n' ]
	then
		echo "Edit mkinitcpio.conf:"
		nano /etc/mkinitcpio.conf
		echo "Building kernel"
	fi
	mkinitcpio -p linux
}

pacstrap_it()
{
	while [ ! $(pacstrap /mnt base) == 0 ]
	do
		printf "pacstrap failed, try again?"
		read -r ans
		if [ "$ans" == "n" ]
		then
			echo "There seems to be a problem, figure it out then restart from here with -p or --pacstrap"
			exit 1
		fi
	done
	
	if [ $(genfstab -o > /mnt/etc/fstab) == 0 ]
	then
		touch /mnt/succ
	else
		echo "There seems to be a problem, fix it(or manually make fstab) then run -r"
		exit 1
	fi
}

grubber_work()
{
	if [ "$ans" == 'y' ]
	then
		auto_grub_edit
	fi
	printf "Edit grub defaults?(Y/n): "
	read -r edit_grub
	if [ ! "$edit_grub" == 'n' ]
	then
		echo "Edit grub /etc/defaults:"
		read
		nano /etc/default/grub
	fi
	if [ "$ans" == 'y' ]
	then
		echo "Installing grub..."
		grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
	else
		printf "Enter your desired grub-install parameters: "
		read -r parameters
		grub-install "$parameters"
	fi
	grub-mkconfig -o /boot/grub/grub.cfg
}

add_admin_user()
{
	printf "Enter main user/admin user name: "
	read -r user
	useradd -m -G wheel -s /bin/bash "$user"
	passwd "$user"
	sed -i '/%wheel ALL=(ALL) ALL/s/^#//g' /etc/sudoers
}

add_autostart_yay()
{
	xterm="xfce4-terminal"
	printf "open xterm and install yay on start up?(y/n)"
	read -r q
	if [ "$q" == 'y' ]
	then
		printf "Default terminal is $xterm, enter a different xterm?(y/n)"
		read -r q
		
		if [ ! "$q" == 'n' ]
		then
			printf "Enter terminal: "
			read -r xterm
		fi
		
		mkdir -p /home/"$user"/.config/autostart
		echo "$xterm -e ~/HR-Tools/$scriptname -y" > /home/"$user"/.config/autostart/finish 
	fi
}

move_over()
{
	cp -u *.services *.pkglist ss zog fbi $scriptname /mnt
	archchroot /mnt /bin/bash -c /$scriptname -n
}

shutitdown()
{
	if [ -f /mnt/$scriptname ]
	then
		rm /mnt/$scriptname /mnt/*.pkglist
		umount -R /mnt
	fi
	reboot
}

finish_install()
{
	
	#selection menu
	echo "choose package sets"
	ops=($(ls -d *.pkglist/))
	len=${#ops[@]}-1
    for each in $(seq 0 $len)
    do
        echo "$each" "${ops[$each]}"
    done
    printf "enter your choice: "
    read -a choices
    packagelist=""
    serviceslist=""
    
    #pacakge selection and services selection
    for choice in "${choices[@]}";do 
		packagelist+="${ops[$choice]} "
		servicea="$(echo cut -d'.' -f 1)"
		servicea+=".services"
		if [ -f $servicea ]
		then
			serviceslist+="$servicea "
		fi
	done
	
	#Video driver install
	IFS="
"
	echo "Video drivers"
	ops=($(pacman -Ss xf86-video | cut -f 1 -d " "))
	IFS=" "
	let len=${#ops[@]}-1
    for each in $(seq 0 $len)
    do
        echo "$each" "${ops[$each]}"
    done
    printf "Enter video driver choice: "
    read -r vchoice
    
    printf "Enable Kernel mode setting for driver?(y/N): "
    read -r ang
    if [ "$ang" == 'y' ]
    then
	    videoe=""
	    kmod=${ops[$vchoice]}
	    kmod+=".kmod"
	    if [ -f $kmod ]
	    then
			videoe=$(cat $kmod)
	    else
			echo "$kmod doesnt exist, would you like to enter Modules variable manually for mkinitcpio.conf?(y/N)"
			read -r anf
			if [ "$anf" == 'y' ]
			then
				printf "Enter module name: "
				read -r videoe
			fi
		fi
		auto_mkinit_edit
    fi
    
	installdis="echo $(cat "$packagelist")"
	pacman -S sudo "${ops[$vchoice]}" "$installdis" "$videoe"
	servicedis="echo $(cat "$serviceslist")"
	systemctl enable "$servicedis"
	
	echo "One last mkinitcpio edit and kernel build"
	mkinit_edit
	
	add_admin_user
	
	add_autostart_yay
	
	if [ ! -f /$scriptname ]
	then
		printf "Restart?(y/n): "
		read -r ans
		if [ "$ans" == 'y' ] ; then shutitdown; fi
	fi
}

if [[ -z $1 ]]
then
	if [ -f 'mandiskenc' ]
	then
		echo "Assuming disk is fully partitioned and mounted."
		sleep 2
	else
		printf "Automated fulldisk encryption for EFI systems? (y/N): "
		read -r d
		if [ "$d" == 'y' ]
		then
			easy_diskprep
		else
			touch mandiskenc
			echo "Fully format and mount all drives under /mnt as per arch install guides instructions."
			exit 1
		fi
	fi
	
	printf "Are you online?(y/n)"
	read -r anz
	if [ ! "$anz" == 'y' ]
	then
		connect-interwebz
	fi
	
	printf "Press x to skip keymap selection(default US): "
	read -r choice_one
	
	if [ ! "$choice_one" == 'x' ] ; then
		pick_keymap
	fi
	
	timedatectl set-ntp true
	
    pacstrap_it
    
	move_over
	
	shutitdown
else
case $1 in
	-r|--recovery)
		touch /mnt/succ
		move_over
    ;;
    -p|--pacstrap)
		pacstrap_it
		move_over
    ;;
	-n|--next)
		timez_setz
		setz_localez
		
		printf "Enter computer name:"
		read -r compname
		echo "$compname" > /etc/hosts
		
		eseential=""
		printf "Did you use install script to partition?(y/n): "
		read -r ans
		if [ "$ans" == 'y' ]
		then
			auto_mkinit_edit
			eseential="cryptsetup"
		fi
		
		mkinit_edit
		
		echo "Set root password:"
		passwd
		
		echo "Enter any extra packages(space seperated) you would like to install(defaults are grub efibootmgr and cryptsetup if you used script to partition: "
		read -r addeseential
		eseential+=" $addeseential"
		pacman -S grub efibootmgr "$eseential"
		
		grubber-work
		
		printf "Would you like to stop at minimal and reboot into your install(y) or continue(n)?(y/n): "
		read -r anf
		if [ "$anf" == 'n' ]
		then
			finish_install
		else
			echo "You will be able to continue installation by running ./HR-Tools/$scriptname -f"
			mkdir -p /root/HR-Tools
			cp -u $scriptname *.services *.pkglist /root/HR-Tools
			chmod +x /root/HR-Tools/$scriptname
		fi
	;;
	-f|--finish)
		finish_install
	;;
	-y|--yay)
		sudo pacman -S base-devel
		git clone https://aur.archlinux.org/yay.git
		cd ./yay || exit
		makepkg -si
		cd ../
		rm -rf ./yay
	;;
esac
fi
