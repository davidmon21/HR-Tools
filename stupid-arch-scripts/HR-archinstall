#!/bin/bash

#basic functions
#variables
$choice_one=0
$choice_two=0

grap_choice()
{
	echo "Please enter it twice to ensure validity:"
	printf "once: "
	read $choice_one
	printf "twice: " 
	read $choice_two
}

verify_choice()
{
	while [ $choice_one -ne $choice_two ]; do
		grab_choice
	done
}

pick_keymap()
{
	if [ $x -ne 'x' ] ; then
		ls /usr/share/kbd/keymaps/**/*.map.gz | less
		grab_choice
		verify_choice
	fi
	
	loadkeys $choice_one
}

easy_diskprep()
{
	
	fdisk -l | less
	printf "Enter disk choice(fullname e.g. '/dev/disk': "
	verify_choice
	
	if [[ $choice_one == **"nvme"** ]]
	then
		s1="p1"
		s2="p2"
		s3="p3"
	else
		s1=1
		s2=2
		s3=3
	fi
	
	sgdisk -z $choice_one
	sgdisk -g -n 1:0:+150M $choice_one -t 1:ef00
	last=`sgdisk -E $choice_one`
	next=`sgdisk -F $choice_one`
	sgdisk -n 2:$next:$last $choice_one -t 2:8300
	echo "Partitioning done, now to setup encryption.."
	cryptsetup luksFormat --type luks1 choice_one$s2
	printf "Enter node name for partition: "
	read rootnodename
	echo "opening..."
	cryptsetup open $choice_one$s2 $rootnodename
	echo "Formating and mounting.."
	mkfs.ext4 /dev/mapper/$rootnodename
	mkfs.fat -F 16 $choice_one$s1
	mount /dev/mapper/$rootnodename /mnt
	mkdir -p /mnt/boot/efi
	mount $choice_one$s1 /mnt/boot/efi
	printf "Enter keyfile name(this is to avoid entering password twice): "
	read $keyname
	dd bs=512 count=4 if=/dev/random of=/mnt/$keyname iflag=fullblock
	cryptsetup -v luksAddKey /dev/$choice_one$s2 /mnt/$keyname
	rootuuid=`blkid -o value $choice_one$s2`
	echo $rootuuid > ss
	echo $keyname > fbi
	echo $rootnodename > zog
}

connect-interwebz()
{
	printf "Time to connect to internet.\nWifi?(y/n): "
	read ans
	if [ ans == 'y' ]
	then
		wifi-menu
		dhcpcd
	else
		dhcpcd
	fi
	echo "Hopfully that worked..."
}

timez_setz()
{
	ls /usr/share/zoneinfo/**/**
	echo "Enter choice as Zone/SubZone"
	grab_choice
	ln -sf /usr/share/zoneinfo/$choice_one /etc/localtime
	hwclock --systohc
}

setz_localez()
{
	printf "Default english-us locales(y/N)?"
	read choice
	if [ choice == 'y' ]
	then
		echo "Editing locale.gen..."
		sed -i '/en_US.UTF-8 UTF-8/s/^#//g' /etc/locale.gen
		echo "Running locale-gen..."
		locale-gen
		echo "Creating locale.conf"
		printf "LANG=en_US.UTF-8\nLC_COLLATE=C\nLC_TIME=en_US.UTF-8\n" > /etc/locale.conf
	else
		printf "edit locale.gen:"
		read
		nano /etc/locale.gen
		echo "Running locale-gen..."
		locale-gen
		printf "edit locale.conf:"
		read
		nano /etc/locale.conf
	fi
}

auto_grub_edit()
{
	rootuuid=`cat ss`
	rootnodename=`cat zog`
	rm ss zog
    grubline="GRUB_CMDLINE_LINUX_DEFAULT=\"quiet cryptdevice=$rootuuid:$rootnodename root=/dev/mapper/$rootnodename resume=/dev/mapper/$rootnodename root efi=runtime\""
    sed -i 's,^GRUB_CMDLINE_LINUX_DEFAULT=.*,'"$grubline"',' /etc/default/grub
	echo "!done!"
}

auto_mkinit_edit()
{
	bootkeyfile=`cat fbi`
	rm fbi
	mods="MODULES=(efivarfs)"
	filez="FILES=(/$bootkeyfile)"
	hooky="HOOKS=(base udev autodetect modconf block keyboard keymap encrypt filesystems)"
	sed -i 's,^MODULES=.*,'"$mods"',' /etc/mkinitcpio.conf
	sed -i 's,^FILES=.*,'"$filez"',' /etc/mkinitcpio.conf
	sed -i 's,^HOOKS=.*,'"$hooky"',' /etc/mkinitcpio.conf
	echo "All done!"
}

finish_install()
{
	echo "choose package sets"
	ops=($(ls -d *.pkglist/))
	let len=${#ops[@]}-1
    for each in `seq 0 $len`
    do
        echo $each ${ops[$each]}
    done
    printf "enter your choice: "
    read -a choices
    packagelist=""
    serviceslist=""
    
    for choice in "${choices[@]}";do 
		packagelist+="${ops[$choice]} "
		servicea="`echo cut -d'.' -f 1`"
		servicea+=".services"
		if [ -f $servicea ]
		then
			serviceslist+="$servicea "
		fi
	done
	
	installdis="echo `cat $packagelist`"
	pacman -S $installdis
	servicedis="echo `cat $serviceslist`"
	systemctl enable $servicesdis
	
	printf "Enter main user/admin user name: "
	read user
	useradd -m -G wheel -s /bin/bash $user
	passwd $user
	sed -i '/%wheel ALL=(ALL) ALL/s/^#//g' /etc/sudoers
	
	xterm="xfce4-terminal"
	printf "open xterm and install yay on start up?(y/n)"
	read q
	if [ q == 'y' ]
	then
		printf "Default terminal is $xterm, enter a different xterm?(y/n)"
		read q
		
		if [ !q == 'n' ]
		then
			printf "Enter terminal: "
			read xterm
		fi
		
		mkdir -p /home/$user/.config/autostart
		echo "$xterm -e ~/HR-Tools/HR-archinstall -y" > /home/$user/.config/autostart/finish 
	fi	
}

if [[ -z $1 ]]; then
then
	if [ -f 'mandiskenc' ]
	then
		echo "Assuming disk is fully partitioned and mounted."
		sleep 2
	else
		printf("Automated fulldisk encryption for EFI systems? (y/N): ")
		read $d
		if [ $d = 'y']
		then
			easy_diskprep
		else
			touch mandiskenc
			echo "Fully format and mount all drives under /mnt as per arch install guides instructions."
			exit 1
		fi
	fi
	
	printf "Are you online?(y/n)"
	read anz
	if [ ! $anz == 'y' ]
		connect-interwebz
	fi
	
	printf("Press x to skip keymap selection(default US): ")
	choice_one $x
	
	if [ ! choice_one == 'x' ] ; then
		pick_keymap
	fi
	
	timedatectl set-ntp true
	
	strap()
	{
		pacstrap /mnt base
	}
	strap
	while [ ! $? == 0 ]; do ; strap ; done
	
	genfstab -o > /mnt/etc/fstab
	if [ $? == 0 ]
	then
		touch /mnt/succ
	else
		echo "There seems to be a problem, fix it(or manually make fstab) then run -r"
		exit 1
	fi
	cp -u ss zog fbi HR-archinstall /mnt
	archchroot /mnt /bin/bash -c /HR-archinstall -n
	rm /mnt/HR-archinstall /mnt/*.pkglist
	umount -R /mnt
	reboot
else
case $1
	-r|--recovery)
		touch /mnt/succ
		cp -u HR-archinstall /mnt/HR-archinstall
		archchroot /mnt /bin/bash -c /HR-archinstall -n
    ;;
	-n|--next)
		timez_setz
		setz_localez
		
		printf "Enter computer name:"
		read $compname
		echo $compname > /etc/hosts
		
		printf "Did you use install script to partition?(y/n): "
		read ans
		if [ $ans == 'y' ]
		then
			auto_mkinit_edit
		fi
		printf "Edit mkinitcpio.conf defaults?(Y/n): "
		read edit_mkinit
		if [ ! $edit_mkinit == 'n' ]
		then
			echo "Edit mkinitcpio.conf:"
			nano /etc/mkinitcpio.conf
			echo "Building kernel"
		fi
		mkinitcpio -p linux
		
		echo "Set root password:"
		passwd
		
		pacman -S grub efibootmgr
		
		
		if [ $ans == 'y' ]
		then
			auto_grub_edit
		fi
		printf "Edit grub defaults?(Y/n): "
		read edit_grub
		if [ ! $edit_grub == 'n' ]
		then
			echo "Edit grub /etc/defaults:"
			read
			nano /etc/default/grub
		fi
		if [ ans == 'y' ]
		then
			echo "Installing grub..."
			grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
		else
			printf "Enter your desired grub-install parameters: "
			read parameters
			grub-install $parameters
		fi
		grub-mkconfig -o /boot/grub/grub.cfg
		printf "Would you like to stop at minimal and reboot into your install(y) or continue(n)?(y/n): "
		read anf
		if [ anf == 'n' ]
		then
			finish_install
		else
			echo "You will be able to continue installation by running ./HR-Tools/HR-archinstall -f"
			mkdir -p /root/HR-Tools
			cp -u HR-archinstall *.pkglist /root/HR-Tools
			chmod +x /root/HR-Tools/HR-archinstall
		fi
	;;
	-f|--finish)
		finish_install
	;;
	-y|--yay)
		git clone https://aur.archlinux.org/yay.git
		cd ./yay
		makepkg -si
		cd ../
		rm -rf ./yay
	;;
esac
fi
	

